import { useState, useEffect, useMemo, useCallback, useRef } from "react";
import { useParams } from "react-router";
import { useSelector } from "react-redux";
import { ToggleButtonGroup, ToggleButton, Tooltip, Grid, Button, Chip, Stack } from "@mui/material";
import { Category, TableDocument, ExportSquare } from "iconsax-react";
import MainCard from "components/MainCard";
import { useBreadcrumb } from "contexts/BreadcrumbContext";

// Components
import CalcTable from "./components/CalcTable";
import Movements from "./components/Movements";
import FolderData from "./components/FolderData";
import FolderPreJudData from "./components/FolderPreJudData";
import FolderJudData from "./components/FolderJudData";
import Notifications from "./components/Notifications";
import Members from "./components/Members";
import TaskList from "./components/TaskList";
import Calendar from "./components/Calendar";
import LinkToJudicialPower from "sections/apps/folders/LinkToJudicialPower";

// Actions
import { dispatch } from "store";
import { getFolderById } from "store/reducers/folder";
import { filterContactsByFolder, getContactsByUserId } from "store/reducers/contacts";

interface StateType {
	folder: {
		folder: any;
		isLoader: boolean;
	};
	contacts: {
		contacts: any[];
		selectedContacts: any[];
		isLoader: boolean;
	};
	auth: {
		user: {
			_id: string;
		};
	};
}

// Constants - Moved outside component
const VIEW_OPTIONS = [
	{
		label: "Expandir",
		value: "one",
		icon: Category,
	},
	{
		label: "Colapsar",
		value: "two",
		icon: TableDocument,
	},
] as const;

const GRID_STYLES = {
	transition: "all 0.5s ease-in-out",
};

const Details = () => {
	const { id } = useParams<{ id: string }>();
	const [alignment, setAlignment] = useState<string>("two");
	const [isColumn, setIsColumn] = useState(false);
	const [isInitialLoad, setIsInitialLoad] = useState(true);
	const [openLinkJudicial, setOpenLinkJudicial] = useState(false);
	const { setCustomLabel, clearCustomLabel } = useBreadcrumb();

	// Format folder name with first letter of each word capitalized
	const formatFolderName = useCallback((name: string) => {
		if (!name) return "";
		// Split by spaces, capitalize each word, then join back
		return name
			.toLowerCase()
			.split(" ")
			.map((word) => word.charAt(0).toUpperCase() + word.slice(1))
			.join(" ");
	}, []);

	// Optimized selectors with specific state slices
	const folder = useSelector((state: StateType) => state.folder.folder);
	const isLoader = useSelector((state: StateType) => state.folder.isLoader);
	const selectedContacts = useSelector((state: StateType) => state.contacts.selectedContacts);
	const contactsLoading = useSelector((state: StateType) => state.contacts.isLoader);
	const contacts = useSelector((state: StateType) => state.contacts.contacts);
	const userId = useSelector((state: StateType) => state.auth.user?._id);

	// Memoized data fetching function
	const fetchData = useCallback(async () => {
		if (!id || id === "undefined") return;

		try {
			const promises = [dispatch(getFolderById(id))];
			if (userId) {
				promises.push(dispatch(getContactsByUserId(userId)));
			}
			await Promise.all(promises);
		} catch (error) {
			console.error("Error fetching data:", error);
		}
	}, [id, userId]);

	// Initial data fetch
	useEffect(() => {
		if (isInitialLoad) {
			fetchData();
			setIsInitialLoad(false);
		}
	}, [fetchData, isInitialLoad]);

	// Contacts filtering with debounce
	useEffect(() => {
		if (!id || id === "undefined" || !contacts?.length) return;

		const timeoutId = setTimeout(() => {
			dispatch(filterContactsByFolder(id));
		}, 300);

		return () => clearTimeout(timeoutId);
	}, [id, contacts]);

	// Track the previous folder name to avoid unnecessary updates
	const prevFolderNameRef = useRef<string>();

	// Update breadcrumb with folder name
	useEffect(() => {
		if (!folder?.folderName || !id) return;

		// Only update if the folder name has actually changed
		if (prevFolderNameRef.current === folder.folderName) return;

		const formattedName = formatFolderName(folder.folderName);
		setCustomLabel(`apps/folders/details/${id}`, formattedName);
		prevFolderNameRef.current = folder.folderName;

		return () => {
			clearCustomLabel(`apps/folders/details/${id}`);
		};
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [folder?.folderName, id]);

	// Memoized grid size calculation
	const getGridSize = useMemo(
		() => (size: number) => ({
			xs: 12,
			md: isColumn ? 12 : 6,
			lg: isColumn ? 12 : size,
		}),
		[isColumn],
	);

	// Memoized handlers
	const handleAlignment = useCallback((_: any, newAlignment: string | null) => {
		if (!newAlignment) return;
		setAlignment(newAlignment);
		setIsColumn(newAlignment === "one");
	}, []);

	const handleOpenLinkJudicial = useCallback(() => {
		setOpenLinkJudicial(true);
	}, []);

	const handleCloseLinkJudicial = useCallback(() => {
		setOpenLinkJudicial(false);
	}, []);

	// Memoized view options renderer
	const renderViewOptions = useMemo(
		() => (
			<Stack direction="row" spacing={2} alignItems="center">
				{/* Vincular con Poder Judicial button/chip */}
				{folder?.pjn ? (
					<Chip
						label="Vinculado con Poder Judicial de la Nación"
						color="success"
						variant="filled"
						icon={<ExportSquare size="16" />}
						sx={{
							fontWeight: 600,
							fontSize: '0.875rem',
							px: 2,
							py: 0.5,
						}}
					/>
				) : (
					<Button
						variant="outlined"
						color="primary"
						startIcon={<ExportSquare size="20" />}
						onClick={handleOpenLinkJudicial}
						sx={{
							borderRadius: 1,
							textTransform: "none",
							fontWeight: 600,
						}}
					>
						Vincular con Poder Judicial
					</Button>
				)}

				{/* View toggle buttons */}
				<ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} size="small" aria-label="view layout">
					{VIEW_OPTIONS.map(({ value, label, icon: Icon }) => (
						<ToggleButton value={value} key={value} aria-label={label}>
							<Tooltip title={label}>
								<Icon variant="Bold" />
							</Tooltip>
						</ToggleButton>
					))}
				</ToggleButtonGroup>
			</Stack>
		),
		[alignment, handleAlignment, folder?.pjn, handleOpenLinkJudicial],
	);

	// Create a dynamic title that shows just the formatted folder name
	const dynamicTitle = useMemo(
		() => (folder?.folderName ? formatFolderName(folder.folderName) : "Detalles de la Causa"),
		[folder, formatFolderName],
	);

	// Memoized components
	const MemoizedFolderData = useMemo(() => <FolderData isLoader={isLoader} folder={folder} type="general" />, [isLoader, folder]);

	const MemoizedMovements = useMemo(() => <Movements title="Movimientos" folderName={folder?.folderName} />, [folder]);

	const MemoizedNotifications = useMemo(() => <Notifications title="Notificaciones" folderName={folder?.folderName} />, [folder]);

	const MemoizedPreJudData = useMemo(() => <FolderPreJudData isLoader={isLoader} folder={folder} type="mediacion" />, [isLoader, folder]);

	const MemoizedJudData = useMemo(() => <FolderJudData isLoader={isLoader} folder={folder} type="judicial" />, [isLoader, folder]);

	const MemoizedCalcTable = useMemo(() => <CalcTable title="Montos, Cálculos y Ofrecimientos" folderData={folder} />, [folder]);

	const MemoizedMembers = useMemo(
		() => (id ? <Members title="Intervinientes" membersData={selectedContacts} isLoader={contactsLoading} folderId={id} /> : null),
		[id, selectedContacts, contactsLoading],
	);

	const MemoizedTaskList = useMemo(() => <TaskList title="Tareas" folderName={folder?.folderName} />, [folder]);

	const MemoizedCalendar = useMemo(() => <Calendar title="Calendario" folderName={folder?.folderName} />, [folder]);

	return (
		<MainCard title={dynamicTitle} secondary={renderViewOptions}>
			<Grid container spacing={3}>
				{/* Row 1 */}
				<Grid item {...getGridSize(6)} sx={GRID_STYLES}>
					{MemoizedFolderData}
				</Grid>
				<Grid item {...getGridSize(3)} sx={GRID_STYLES}>
					{MemoizedMovements}
				</Grid>
				<Grid item {...getGridSize(3)} sx={GRID_STYLES}>
					{MemoizedNotifications}
				</Grid>

				{/* Row 2 */}
				<Grid item {...getGridSize(4)} sx={GRID_STYLES}>
					{MemoizedPreJudData}
				</Grid>
				<Grid item {...getGridSize(4)} sx={GRID_STYLES}>
					{MemoizedJudData}
				</Grid>
				<Grid item {...getGridSize(4)} sx={GRID_STYLES}>
					{MemoizedCalcTable}
				</Grid>

				{/* Row 3 */}
				<Grid item {...getGridSize(3)} sx={GRID_STYLES}>
					{MemoizedMembers}
				</Grid>
				<Grid item {...getGridSize(3)} sx={GRID_STYLES}>
					{MemoizedTaskList}
				</Grid>
				<Grid item {...getGridSize(6)} sx={GRID_STYLES}>
					{MemoizedCalendar}
				</Grid>
			</Grid>

			{/* LinkToJudicialPower Modal */}
			{id && folder && (
				<LinkToJudicialPower
					openLink={openLinkJudicial}
					onCancelLink={handleCloseLinkJudicial}
					folderId={id}
					folderName={folder.folderName}
				/>
			)}
		</MainCard>
	);
};

export default Details;
