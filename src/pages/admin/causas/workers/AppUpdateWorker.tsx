import React from "react";
import { useState, useEffect } from "react";
import {
	Box,
	Card,
	CardContent,
	Grid,
	Typography,
	Switch,
	TextField,
	Button,
	Stack,
	IconButton,
	Tooltip,
	Alert,
	Table,
	TableBody,
	TableCell,
	TableContainer,
	TableHead,
	TableRow,
	Paper,
	Skeleton,
	Chip,
	LinearProgress,
	Collapse,
} from "@mui/material";
import { Edit2, TickCircle, CloseCircle, Refresh, Setting2, InfoCircle, ArrowDown2, ArrowUp2 } from "iconsax-react";
import { useSnackbar } from "notistack";
import { WorkersService, WorkerConfig } from "api/workers";
import AdvancedConfigModal from "./AdvancedConfigModal";

// Enums para el worker de actualizaci√≥n
const UPDATE_MODE_OPTIONS = [
	{ value: "all", label: "Todos los documentos" },
	{ value: "single", label: "Documento √∫nico" },
];

const AppUpdateWorker = () => {
	const { enqueueSnackbar } = useSnackbar();
	const [configs, setConfigs] = useState<WorkerConfig[]>([]);
	const [loading, setLoading] = useState(true);
	const [editingId, setEditingId] = useState<string | null>(null);
	const [editValues, setEditValues] = useState<Partial<WorkerConfig>>({});
	const [advancedConfigOpen, setAdvancedConfigOpen] = useState(false);
	const [selectedConfig, setSelectedConfig] = useState<WorkerConfig | null>(null);
	const [guideExpanded, setGuideExpanded] = useState(false);

	// Helper para obtener label del modo de actualizaci√≥n
	const getUpdateModeLabel = (value: string) => {
		return UPDATE_MODE_OPTIONS.find((opt) => opt.value === value)?.label || value;
	};

	// Cargar configuraciones
	const fetchConfigs = async () => {
		try {
			setLoading(true);
			const response = await WorkersService.getAppUpdateConfigs({ page: 1, limit: 20 });
			if (response.success && Array.isArray(response.data)) {
				setConfigs(response.data);
			}
		} catch (error) {
			enqueueSnackbar("Error al cargar las configuraciones de actualizaci√≥n", {
				variant: "error",
				anchorOrigin: { vertical: "bottom", horizontal: "right" },
			});
			console.error(error);
		} finally {
			setLoading(false);
		}
	};

	useEffect(() => {
		fetchConfigs();
	}, []);

	// Obtener el ID real del documento
	const getConfigId = (config: WorkerConfig): string => {
		if (typeof config._id === "string") {
			return config._id;
		}
		return config._id.$oid;
	};

	// Formatear fecha
	const formatDate = (date: any): string => {
		if (!date) return "N/A";
		const dateStr = typeof date === "string" ? date : date.$date;
		return new Date(dateStr).toLocaleString("es-ES");
	};

	// Calcular tasa de √©xito
	const calculateSuccessRate = (config: WorkerConfig): number => {
		const checked = config.documents_checked || 0;
		const updated = config.documents_updated || 0;
		if (checked === 0) return 0;
		return (updated / checked) * 100;
	};

	// Manejar edici√≥n
	const handleEdit = (config: WorkerConfig) => {
		const id = getConfigId(config);
		setEditingId(id);
		setEditValues({
			worker_id: config.worker_id,
			enabled: config.enabled,
			batch_size: config.batch_size,
			last_update_threshold_hours: config.last_update_threshold_hours,
		});
	};

	const handleCancelEdit = () => {
		setEditingId(null);
		setEditValues({});
	};

	const handleSave = async () => {
		if (!editingId) return;

		try {
			const response = await WorkersService.updateAppUpdateConfig(editingId, editValues);
			if (response.success) {
				enqueueSnackbar("Configuraci√≥n actualizada exitosamente", {
					variant: "success",
					anchorOrigin: { vertical: "bottom", horizontal: "right" },
				});
				await fetchConfigs();
				handleCancelEdit();
			}
		} catch (error: any) {
			enqueueSnackbar(error.message || "Error al actualizar la configuraci√≥n", {
				variant: "error",
				anchorOrigin: { vertical: "bottom", horizontal: "right" },
			});
		}
	};

	const handleToggleEnabled = async (config: WorkerConfig) => {
		const id = getConfigId(config);
		try {
			const response = await WorkersService.updateAppUpdateConfig(id, {
				enabled: !config.enabled,
			});
			if (response.success) {
				enqueueSnackbar(`Worker ${!config.enabled ? "activado" : "desactivado"}`, {
					variant: "success",
					anchorOrigin: { vertical: "bottom", horizontal: "right" },
				});
				await fetchConfigs();
			}
		} catch (error: any) {
			enqueueSnackbar(error.message || "Error al cambiar el estado", {
				variant: "error",
				anchorOrigin: { vertical: "bottom", horizontal: "right" },
			});
		}
	};

	// Manejar configuraci√≥n avanzada
	const handleAdvancedConfig = (config: WorkerConfig) => {
		setSelectedConfig(config);
		setAdvancedConfigOpen(true);
	};

	const handleCloseAdvancedConfig = () => {
		setAdvancedConfigOpen(false);
		setSelectedConfig(null);
	};

	if (loading) {
		return (
			<Grid container spacing={{ xs: 1.5, sm: 2, md: 3 }}>
				{[1, 2, 3, 4].map((item) => (
					<Grid item xs={12} key={item}>
						<Skeleton variant="rectangular" height={80} />
					</Grid>
				))}
			</Grid>
		);
	}

	return (
		<Stack spacing={{ xs: 1.5, sm: 2, md: 3 }}>
			{/* Header con acciones */}
			<Box display="flex" justifyContent="space-between" alignItems="center">
				<Typography variant="h5">Configuraci√≥n del Worker de Actualizaci√≥n</Typography>
				<Button variant="outlined" size="small" startIcon={<Refresh size={16} />} onClick={fetchConfigs}>
					Actualizar
				</Button>
			</Box>

			{/* Informaci√≥n del worker */}
			<Alert severity="info" variant="outlined">
				<Typography variant="subtitle2" fontWeight="bold">
					Worker de Actualizaci√≥n de Aplicaciones
				</Typography>
				<Typography variant="body2" sx={{ mt: 1 }}>
					Este worker se encarga de mantener actualizados los documentos de causas judiciales, verificando peri√≥dicamente cambios en los
					expedientes y sincronizando la informaci√≥n m√°s reciente.
				</Typography>
			</Alert>

			{/* Gu√≠a de Funcionamiento - Colapsable */}
			<Card variant="outlined" sx={{ backgroundColor: "background.default" }}>
				<CardContent sx={{ pb: guideExpanded ? 2 : 1 }}>
					<Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: guideExpanded ? 2 : 0 }}>
						<Stack direction="row" spacing={1} alignItems="center">
							<InfoCircle size={20} color="#1890ff" />
							<Typography variant="h6">Gu√≠a de Funcionamiento del Worker</Typography>
						</Stack>
						<Button
							size="small"
							onClick={() => setGuideExpanded(!guideExpanded)}
							endIcon={guideExpanded ? <ArrowUp2 size={16} /> : <ArrowDown2 size={16} />}
							sx={{ minWidth: "auto" }}
						>
							{guideExpanded ? "Ocultar" : "Ver gu√≠a"}
						</Button>
					</Stack>

					<Collapse in={guideExpanded} timeout="auto" unmountOnExit>
						{/* Descripci√≥n General */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								üìã Descripci√≥n General
							</Typography>
							<Typography variant="body2" paragraph>
								El Worker de Actualizaci√≥n es un proceso automatizado que mantiene actualizados los expedientes judiciales verificando
								peri√≥dicamente si existen nuevos movimientos o cambios en el sistema del Poder Judicial de la Naci√≥n.
							</Typography>
						</Box>

						{/* Horario de Operaci√≥n */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								‚è∞ Horario de Operaci√≥n
							</Typography>
							<Box sx={{ pl: 2 }}>
								<Typography variant="body2">‚Ä¢ D√≠as laborables: Lunes a Viernes</Typography>
								<Typography variant="body2">‚Ä¢ Horario: 10:00 a 20:00 (hora Argentina)</Typography>
								<Typography variant="body2">‚Ä¢ Frecuencia de ejecuci√≥n: Cada 2 minutos durante el horario activo</Typography>
							</Box>
						</Box>

						{/* Ciclo de Actualizaci√≥n */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								üîÑ Ciclo de Actualizaci√≥n
							</Typography>
							<Typography variant="subtitle2" fontWeight="bold" sx={{ mt: 2 }}>
								Frecuencia de Verificaci√≥n por Expediente
							</Typography>

							<Box sx={{ mt: 2 }}>
								<Typography variant="subtitle2" fontWeight="bold" color="success.main" gutterBottom>
									‚úÖ Actualizaci√≥n Exitosa
								</Typography>
								<Box sx={{ pl: 2 }}>
									<Typography variant="body2">‚Ä¢ Per√≠odo de espera: 12 horas (configurable)</Typography>
									<Typography variant="body2">
										‚Ä¢ Cuando un expediente se verifica exitosamente, independientemente de si se encontraron cambios o no, el sistema
										esperar√° 12 horas antes de volver a verificarlo
									</Typography>
									<Typography variant="body2">‚Ä¢ Esto aplica tanto si se encontraron nuevos movimientos como si no hubo cambios</Typography>
								</Box>
							</Box>

							<Box sx={{ mt: 2 }}>
								<Typography variant="subtitle2" fontWeight="bold" color="error.main" gutterBottom>
									‚ùå Errores y Reintentos
								</Typography>
								<Typography variant="body2" paragraph>
									Cuando ocurre un error, el expediente NO actualiza su marca de tiempo y se reintentar√° en el pr√≥ximo ciclo (cada 2
									minutos):
								</Typography>
								<Box sx={{ pl: 2 }}>
									<Typography variant="body2">‚Ä¢ Error de Captcha: Reintento autom√°tico cada 2 minutos</Typography>
									<Typography variant="body2">‚Ä¢ Expediente no encontrado: Reintento autom√°tico cada 2 minutos</Typography>
									<Typography variant="body2">‚Ä¢ Balance insuficiente: Reintento autom√°tico cada 2 minutos</Typography>
									<Typography variant="body2">‚Ä¢ Otros errores: Reintento autom√°tico cada 2 minutos</Typography>
								</Box>
							</Box>
						</Box>

						{/* Configuraci√≥n */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								‚öôÔ∏è Configuraci√≥n
							</Typography>
							<Typography variant="subtitle2" fontWeight="bold" sx={{ mt: 2 }}>
								Par√°metro Principal: last_update_threshold_hours
							</Typography>
							<Box sx={{ pl: 2 }}>
								<Typography variant="body2">‚Ä¢ Valor por defecto: 12 horas</Typography>
								<Typography variant="body2">‚Ä¢ Ubicaci√≥n: Colecci√≥n MongoDB configuracion-app-update</Typography>
								<Typography variant="body2">
									‚Ä¢ Funci√≥n: Define el tiempo m√≠nimo que debe transcurrir desde la √∫ltima actualizaci√≥n exitosa antes de verificar
									nuevamente un expediente
								</Typography>
								<Typography variant="body2">‚Ä¢ Rango v√°lido: M√≠nimo 1 hora</Typography>
							</Box>

							<Typography variant="subtitle2" fontWeight="bold" sx={{ mt: 2 }}>
								Modos de Actualizaci√≥n
							</Typography>
							<Typography variant="body2" paragraph>
								El worker puede configurarse para actualizar:
							</Typography>
							<Box sx={{ pl: 2 }}>
								<Typography variant="body2">‚Ä¢ all: Todos los fueros</Typography>
								<Typography variant="body2">‚Ä¢ civil: Solo expedientes civiles</Typography>
								<Typography variant="body2">‚Ä¢ ss: Solo expedientes de Seguridad Social</Typography>
								<Typography variant="body2">‚Ä¢ trabajo: Solo expedientes laborales</Typography>
							</Box>
						</Box>

						{/* Priorizaci√≥n de Expedientes */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								üìä Priorizaci√≥n de Expedientes
							</Typography>
							<Typography variant="body2" paragraph>
								El sistema prioriza los expedientes en el siguiente orden:
							</Typography>
							<Box sx={{ pl: 2 }}>
								<Typography variant="body2">1. Nunca actualizados: Expedientes sin lastUpdate</Typography>
								<Typography variant="body2">
									2. M√°s antiguos: Expedientes con lastUpdate m√°s antiguo que el threshold configurado
								</Typography>
								<Typography variant="body2">
									3. Sin movimientos del d√≠a: Expedientes que no tienen movimientos registrados para el d√≠a actual
								</Typography>
							</Box>
						</Box>

						{/* Sistema de Bloqueo */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								üîí Sistema de Bloqueo
							</Typography>
							<Typography variant="body2" paragraph>
								Para evitar procesamiento duplicado en entornos con m√∫ltiples workers:
							</Typography>
							<Box sx={{ pl: 2 }}>
								<Typography variant="body2">‚Ä¢ Cada expediente se "bloquea" durante su procesamiento (5 minutos m√°ximo)</Typography>
								<Typography variant="body2">‚Ä¢ Si el proceso falla, el bloqueo se libera autom√°ticamente</Typography>
								<Typography variant="body2">‚Ä¢ Esto previene que m√∫ltiples workers procesen el mismo expediente simult√°neamente</Typography>
							</Box>
						</Box>

						{/* Informaci√≥n Actualizada */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								üìà Informaci√≥n Actualizada
							</Typography>
							<Typography variant="body2" paragraph>
								Cuando se verifica un expediente, el sistema actualiza:
							</Typography>
							<Box sx={{ pl: 2 }}>
								<Typography variant="body2">‚Ä¢ Movimientos judiciales: Nuevas actuaciones procesales</Typography>
								<Typography variant="body2">‚Ä¢ Car√°tula: Nombre del expediente</Typography>
								<Typography variant="body2">‚Ä¢ Objeto: Materia o tipo de proceso</Typography>
								<Typography variant="body2">‚Ä¢ Fecha del √∫ltimo movimiento</Typography>
								<Typography variant="body2">‚Ä¢ Contador de movimientos totales</Typography>
							</Box>
						</Box>

						{/* Notificaciones */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								üìß Notificaciones
							</Typography>
							<Box sx={{ pl: 2 }}>
								<Typography variant="body2">‚Ä¢ Se env√≠an notificaciones autom√°ticas cuando se detectan nuevos movimientos</Typography>
								<Typography variant="body2">‚Ä¢ Los usuarios asociados al expediente reciben alertas en tiempo real</Typography>
							</Box>
						</Box>

						{/* Reportes Autom√°ticos */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								üìä Reportes Autom√°ticos
							</Typography>
							<Typography variant="body2" paragraph>
								El sistema genera reportes en los siguientes horarios:
							</Typography>
							<Box sx={{ pl: 2 }}>
								<Typography variant="body2">‚Ä¢ 10:00: Reporte inicial del d√≠a</Typography>
								<Typography variant="body2">‚Ä¢ 12:00, 14:00, 16:00, 18:00: Reportes de progreso</Typography>
								<Typography variant="body2">‚Ä¢ 20:00: Reporte final con resumen completo</Typography>
							</Box>
						</Box>

						{/* Mantenimiento Autom√°tico */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								üßπ Mantenimiento Autom√°tico
							</Typography>
							<Box sx={{ pl: 2 }}>
								<Typography variant="body2">‚Ä¢ Limpieza de historial: Domingos a las 3:00 AM</Typography>
								<Typography variant="body2">‚Ä¢ Se mantienen los √∫ltimos 100 registros de actualizaci√≥n por expediente</Typography>
								<Typography variant="body2">‚Ä¢ Registros de los √∫ltimos 7 d√≠as se conservan completos</Typography>
							</Box>
						</Box>

						{/* Consideraciones Importantes */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								‚ö†Ô∏è Consideraciones Importantes
							</Typography>
							<Box sx={{ pl: 2 }}>
								<Typography variant="body2">
									1. Consumo de Captchas: Cada verificaci√≥n consume un captcha del servicio configurado (2captcha o Capsolver)
								</Typography>
								<Typography variant="body2">
									2. Carga del sistema: El worker se pausa autom√°ticamente si detecta alta carga de CPU
								</Typography>
								<Typography variant="body2">3. Expedientes deshabilitados: Los expedientes con update: false no se verifican</Typography>
								<Typography variant="body2">
									4. L√≠mites de procesamiento: Solo se procesa un expediente a la vez para evitar sobrecarga
								</Typography>
							</Box>
						</Box>

						{/* Estados del Expediente */}
						<Box sx={{ mt: 3 }}>
							<Typography variant="subtitle1" fontWeight="bold" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
								üîç Estados del Expediente
							</Typography>
							<Box sx={{ pl: 2 }}>
								<Typography variant="body2">‚Ä¢ Pendiente: Esperando pr√≥xima verificaci√≥n seg√∫n threshold</Typography>
								<Typography variant="body2">‚Ä¢ En proceso: Siendo verificado actualmente (m√°ximo 5 minutos)</Typography>
								<Typography variant="body2">‚Ä¢ Actualizado: Verificaci√≥n exitosa, esperando pr√≥ximo ciclo (12 horas)</Typography>
								<Typography variant="body2">‚Ä¢ Con errores: Reintentando cada 2 minutos hasta resoluci√≥n</Typography>
							</Box>
						</Box>

						<Box sx={{ mt: 3, pt: 2, borderTop: 1, borderColor: "divider" }}>
							<Typography variant="body2" color="text.secondary">
								Esta configuraci√≥n asegura un balance √≥ptimo entre mantener la informaci√≥n actualizada y el uso eficiente de recursos del
								sistema.
							</Typography>
						</Box>
					</Collapse>
				</CardContent>
			</Card>

			{/* Informaci√≥n detallada del worker */}
			<Card variant="outlined" sx={{ backgroundColor: "background.default" }}>
				<CardContent sx={{ py: 2 }}>
					<Typography variant="subtitle2" fontWeight="bold" gutterBottom>
						Elegibilidad de Documentos - Worker de Actualizaci√≥n
					</Typography>
					<Grid container spacing={1.5}>
						<Grid item xs={6} sm={3}>
							<Stack direction="row" spacing={1} alignItems="center">
								<Typography variant="caption" color="text.secondary">
									Source:
								</Typography>
								<Typography variant="caption" fontWeight={500}>
									"app"
								</Typography>
							</Stack>
						</Grid>
						<Grid item xs={6} sm={3}>
							<Stack direction="row" spacing={1} alignItems="center">
								<Typography variant="caption" color="text.secondary">
									Verified (req):
								</Typography>
								<Typography variant="caption" fontWeight={500}>
									true
								</Typography>
							</Stack>
						</Grid>
						<Grid item xs={6} sm={3}>
							<Stack direction="row" spacing={1} alignItems="center">
								<Typography variant="caption" color="text.secondary">
									isValid (req):
								</Typography>
								<Typography variant="caption" fontWeight={500}>
									true
								</Typography>
							</Stack>
						</Grid>
						<Grid item xs={6} sm={3}>
							<Stack direction="row" spacing={1} alignItems="center">
								<Typography variant="caption" color="text.secondary">
									Update:
								</Typography>
								<Typography variant="caption" fontWeight={500}>
									true
								</Typography>
							</Stack>
						</Grid>
						<Grid item xs={6} sm={3}>
							<Stack direction="row" spacing={1} alignItems="center">
								<Typography variant="caption" color="text.secondary">
									Funci√≥n:
								</Typography>
								<Typography variant="caption" fontWeight={500} color="primary.main">
									Mantenimiento continuo
								</Typography>
							</Stack>
						</Grid>
						<Grid item xs={6} sm={3}>
							<Stack direction="row" spacing={1} alignItems="center">
								<Typography variant="caption" color="text.secondary">
									Modifica verified:
								</Typography>
								<Typography variant="caption" fontWeight={500} color="error.main">
									NO
								</Typography>
							</Stack>
						</Grid>
						<Grid item xs={6} sm={3}>
							<Stack direction="row" spacing={1} alignItems="center">
								<Typography variant="caption" color="text.secondary">
									Modifica isValid:
								</Typography>
								<Typography variant="caption" fontWeight={500} color="error.main">
									NO
								</Typography>
							</Stack>
						</Grid>
						<Grid item xs={6} sm={3}>
							<Stack direction="row" spacing={1} alignItems="center">
								<Typography variant="caption" color="text.secondary">
									Frecuencia:
								</Typography>
								<Typography variant="caption" fontWeight={500} color="info.main">
									Seg√∫n threshold
								</Typography>
							</Stack>
						</Grid>
					</Grid>
				</CardContent>
			</Card>

			{/* Tabla de configuraciones */}
			<TableContainer component={Paper} variant="outlined">
				<Table>
					<TableHead>
						<TableRow>
							<TableCell>Worker ID</TableCell>
							<TableCell>Modo</TableCell>
							<TableCell align="center">Tama√±o Lote</TableCell>
							<TableCell align="center">Umbral (horas)</TableCell>
							<TableCell align="center">Verificados</TableCell>
							<TableCell align="center">Actualizados</TableCell>
							<TableCell align="center">Fallidos</TableCell>
							<TableCell align="center">Tasa de √âxito</TableCell>
							<TableCell align="center">Estado</TableCell>
							<TableCell align="center">√öltima Verificaci√≥n</TableCell>
							<TableCell align="center">Acciones</TableCell>
						</TableRow>
					</TableHead>
					<TableBody>
						{configs.map((config) => {
							const configId = getConfigId(config);
							const isEditing = editingId === configId;
							const successRate = calculateSuccessRate(config);

							return (
								<TableRow key={configId}>
									<TableCell>
										{isEditing ? (
											<TextField
												size="small"
												value={editValues.worker_id || ""}
												onChange={(e) => setEditValues({ ...editValues, worker_id: e.target.value })}
												fullWidth
											/>
										) : (
											<Typography variant="body2" fontWeight={500}>
												{config.worker_id}
											</Typography>
										)}
									</TableCell>
									<TableCell>
										<Chip
											label={getUpdateModeLabel(config.update_mode || "")}
											size="small"
											color={config.update_mode === "all" ? "secondary" : "default"}
											variant="outlined"
										/>
									</TableCell>
									<TableCell align="center">
										{isEditing ? (
											<TextField
												size="small"
												type="number"
												value={editValues.batch_size || ""}
												onChange={(e) => setEditValues({ ...editValues, batch_size: Number(e.target.value) })}
												sx={{ width: 80 }}
											/>
										) : (
											<Typography variant="body2">{config.batch_size}</Typography>
										)}
									</TableCell>
									<TableCell align="center">
										{isEditing ? (
											<TextField
												size="small"
												type="number"
												value={editValues.last_update_threshold_hours || ""}
												onChange={(e) => setEditValues({ ...editValues, last_update_threshold_hours: Number(e.target.value) })}
												sx={{ width: 80 }}
											/>
										) : (
											<Typography variant="body2">{config.last_update_threshold_hours || 0}</Typography>
										)}
									</TableCell>
									<TableCell align="center">
										<Typography variant="body2" fontWeight={500}>
											{config.documents_checked?.toLocaleString() || 0}
										</Typography>
									</TableCell>
									<TableCell align="center">
										<Typography variant="body2" color="success.main" fontWeight={500}>
											{config.documents_updated?.toLocaleString() || 0}
										</Typography>
									</TableCell>
									<TableCell align="center">
										<Typography variant="body2" color="error.main" fontWeight={500}>
											{config.documents_failed?.toLocaleString() || 0}
										</Typography>
									</TableCell>
									<TableCell align="center">
										<Box sx={{ width: 100 }}>
											<LinearProgress
												variant="determinate"
												value={successRate}
												color={successRate > 50 ? "success" : successRate > 25 ? "warning" : "error"}
												sx={{ height: 8, borderRadius: 4 }}
											/>
											<Typography variant="caption" color="text.secondary">
												{successRate.toFixed(1)}%
											</Typography>
										</Box>
									</TableCell>
									<TableCell align="center">
										<Switch
											checked={isEditing ? editValues.enabled : config.enabled}
											onChange={() => {
												if (isEditing) {
													setEditValues({ ...editValues, enabled: !editValues.enabled });
												} else {
													handleToggleEnabled(config);
												}
											}}
											size="small"
											color="primary"
										/>
									</TableCell>
									<TableCell align="center">
										<Typography variant="caption">{formatDate(config.last_check)}</Typography>
									</TableCell>
									<TableCell align="center">
										{isEditing ? (
											<Stack direction="row" spacing={1} justifyContent="center">
												<Tooltip title="Guardar">
													<IconButton size="small" color="primary" onClick={handleSave}>
														<TickCircle size={18} />
													</IconButton>
												</Tooltip>
												<Tooltip title="Cancelar">
													<IconButton size="small" color="error" onClick={handleCancelEdit}>
														<CloseCircle size={18} />
													</IconButton>
												</Tooltip>
											</Stack>
										) : (
											<Stack direction="row" spacing={1} justifyContent="center">
												<Tooltip title="Editar">
													<IconButton size="small" color="primary" onClick={() => handleEdit(config)}>
														<Edit2 size={18} />
													</IconButton>
												</Tooltip>
												<Tooltip title="Configuraci√≥n Avanzada">
													<IconButton size="small" color="secondary" onClick={() => handleAdvancedConfig(config)}>
														<Setting2 size={18} />
													</IconButton>
												</Tooltip>
											</Stack>
										)}
									</TableCell>
								</TableRow>
							);
						})}
					</TableBody>
				</Table>
			</TableContainer>

			{/* Estad√≠sticas */}
			<Grid container spacing={2}>
				<Grid item xs={12} sm={6} md={3}>
					<Card variant="outlined">
						<CardContent>
							<Typography variant="subtitle2" color="text.secondary" gutterBottom>
								Total Workers
							</Typography>
							<Typography variant="h4">{configs.length}</Typography>
						</CardContent>
					</Card>
				</Grid>
				<Grid item xs={12} sm={6} md={3}>
					<Card variant="outlined">
						<CardContent>
							<Typography variant="subtitle2" color="text.secondary" gutterBottom>
								Workers Activos
							</Typography>
							<Typography variant="h4" color="success.main">
								{configs.filter((c) => c.enabled).length}
							</Typography>
						</CardContent>
					</Card>
				</Grid>
				<Grid item xs={12} sm={6} md={3}>
					<Card variant="outlined">
						<CardContent>
							<Typography variant="subtitle2" color="text.secondary" gutterBottom>
								Total Actualizados
							</Typography>
							<Typography variant="h4" color="info.main">
								{configs.reduce((acc, c) => acc + (c.documents_updated || 0), 0).toLocaleString()}
							</Typography>
						</CardContent>
					</Card>
				</Grid>
				<Grid item xs={12} sm={6} md={3}>
					<Card variant="outlined">
						<CardContent>
							<Typography variant="subtitle2" color="text.secondary" gutterBottom>
								Tasa de √âxito Global
							</Typography>
							<Typography variant="h4" color="warning.main">
								{(() => {
									const totalChecked = configs.reduce((acc, c) => acc + (c.documents_checked || 0), 0);
									const totalUpdated = configs.reduce((acc, c) => acc + (c.documents_updated || 0), 0);
									return totalChecked > 0 ? `${((totalUpdated / totalChecked) * 100).toFixed(1)}%` : "0%";
								})()}
							</Typography>
						</CardContent>
					</Card>
				</Grid>
			</Grid>

			{/* Informaci√≥n adicional */}
			<Alert severity="warning" variant="outlined">
				<Typography variant="subtitle2">
					<strong>Nota sobre el umbral de actualizaci√≥n:</strong>
				</Typography>
				<Typography variant="body2" sx={{ mt: 1 }}>
					El umbral indica cu√°ntas horas deben pasar desde la √∫ltima actualizaci√≥n de un documento antes de verificar nuevamente si hay
					cambios. Un valor m√°s bajo significa verificaciones m√°s frecuentes pero mayor consumo de recursos.
				</Typography>
			</Alert>

			{/* Modal de configuraci√≥n avanzada */}
			{selectedConfig && (
				<AdvancedConfigModal
					open={advancedConfigOpen}
					onClose={handleCloseAdvancedConfig}
					config={selectedConfig}
					onUpdate={fetchConfigs}
					workerType="app-update"
				/>
			)}
		</Stack>
	);
};

export default AppUpdateWorker;
